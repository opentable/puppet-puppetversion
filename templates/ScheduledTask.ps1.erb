param (
[string]$ensure,
[string]$exists
)

#
# Powershell script to create a scheduled task that upgrades puppet within (by default) 3 minutes
#

$scheduledTask = & C:\Windows\system32\schtasks.exe /query /V /FO list /TN "puppet upgrade task"

if ( $ensure -eq "present" ) {
  $thisMin = [int](Get-Date -format %m)

  if ( ($thisMin + <%= @time_delay %>) -ge 59) {
    $thisMin = 0
    $delay = <%= @time_delay %> + 1
  } else {
    $timeMin = $thisMin
    $delay = <%= @time_delay %>
  }

  $plusTime = ([string]($timeMin + $delay)).PadLeft(1,'0')
  $thisHour = (Get-Date -format HH)

  $startTime = "$thisHour`:$plusTime"

  if ( $scheduledTask -eq $null ) {
    schtasks /create /TN "puppet upgrade task" /TR "C:\Windows\system32\WindowsPowershell\v1.0\powershell.exe -NoProfile -NonInteractive -NoLogo -ExecutionPolicy Bypass -File C:\Windows\Temp\UpgradePuppet.ps1 -version <%= @version %> -architecture <%=@architecture %>" /SC Once /ST $startTime /RU SYSTEM
  } else {
    schtasks /change /TN "puppet upgrade task" /TR "C:\Windows\system32\WindowsPowershell\v1.0\powershell.exe -NoProfile -NonInteractive -NoLogo -ExecutionPolicy Bypass -File C:\Windows\Temp\UpgradePuppet.ps1 -version <%= @version %> -architecture <%=@architecture %>" /ST $startTime /RU SYSTEM
  }

  Exit 0
} elseif ( $ensure -eq "absent" ) {
  schtasks /delete /F /TN "puppet upgrade task"
  Exit 0
}

if ( $exists -eq "True" ) {

  if ( $LASTEXITCODE ) {
    Exit 1
  } else {

    $st = ($scheduledTask[21] -split "\s+")[2]

    if ($st) {

      $h = (($st -split ":")[0]).PadLeft(2,'0')
      $m = (($st -split ":")[0]).PadLeft(2,'0')
      $s = (($st -split ":")[0]).PadLeft(2,'0')

      $t = "$h`:$m`:$s"

      $taskDate = [DateTime]::ParseExact($t,"hh:mm:ss",$null)

      $timeNewer = ((Get-Date).AddMinutes(10))
      $timeOlder = ((Get-Date).AddMinutes(-10))


      if ( ($taskDate -lt $timeOlder) -or ($taskDate -gt $timeNewer) ) {
        Exit 0
      } else {
        Exit 1
      }
    } else {
      Exit 1
    }
  }

}
